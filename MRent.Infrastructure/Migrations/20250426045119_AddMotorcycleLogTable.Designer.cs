// <auto-generated />
using System;
using MRent.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MRent.Infrastructure.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20250426045119_AddMotorcycleLogTable")]
    partial class AddMotorcycleLogTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MRent.Domain.Entities.CourierEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BornDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_nascimento");

                    b.Property<string>("CNH")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("numero_cnh");

                    b.Property<string>("CNHImage")
                        .HasColumnType("text")
                        .HasColumnName("imagem_cnh");

                    b.Property<int>("CNHType")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_cnh");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cnpj");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identificador");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex("CNH")
                        .IsUnique();

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.HasIndex("Identifier");

                    b.ToTable("entregador", (string)null);
                });

            modelBuilder.Entity("MRent.Domain.Entities.MotorcycleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identificador");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("modelo");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("placa");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("ano");

                    b.HasKey("Id");

                    b.HasIndex("Identifier");

                    b.HasIndex("Plate")
                        .IsUnique();

                    b.ToTable("moto", (string)null);
                });

            modelBuilder.Entity("MRent.Domain.Entities.MotorcycleLogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identificador");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("modelo");

                    b.Property<Guid>("MotorcycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("moto_id");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("placa");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("ano");

                    b.HasKey("Id");

                    b.HasIndex("Identifier");

                    b.HasIndex("Plate")
                        .IsUnique();

                    b.ToTable("motolog", (string)null);
                });

            modelBuilder.Entity("MRent.Domain.Entities.PlanEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("DailyExceededEndDateFee")
                        .HasColumnType("integer")
                        .HasColumnName("taxa_dia_excedido");

                    b.Property<double>("DailyValue")
                        .HasColumnType("double precision")
                        .HasColumnName("valor_diaria");

                    b.Property<int>("Days")
                        .HasColumnType("integer")
                        .HasColumnName("dias");

                    b.Property<int>("ReturnFeePercent")
                        .HasColumnType("integer")
                        .HasColumnName("porcentagem_taxa_retorno");

                    b.HasKey("Id");

                    b.ToTable("plano", (string)null);
                });

            modelBuilder.Entity("MRent.Domain.Entities.RentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CourierId")
                        .HasColumnType("uuid")
                        .HasColumnName("entregador_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_termino");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_previsao_termino");

                    b.Property<Guid>("MotorcycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("moto_id");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("plano_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_inicio");

                    b.HasKey("Id");

                    b.HasIndex("CourierId");

                    b.HasIndex("MotorcycleId");

                    b.HasIndex("PlanId");

                    b.ToTable("locacao", (string)null);
                });

            modelBuilder.Entity("MRent.Domain.Entities.RentEntity", b =>
                {
                    b.HasOne("MRent.Domain.Entities.CourierEntity", "Courier")
                        .WithMany("Rents")
                        .HasForeignKey("CourierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MRent.Domain.Entities.MotorcycleEntity", "Motorcycle")
                        .WithMany("Rents")
                        .HasForeignKey("MotorcycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MRent.Domain.Entities.PlanEntity", "Plan")
                        .WithMany("Rents")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courier");

                    b.Navigation("Motorcycle");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("MRent.Domain.Entities.CourierEntity", b =>
                {
                    b.Navigation("Rents");
                });

            modelBuilder.Entity("MRent.Domain.Entities.MotorcycleEntity", b =>
                {
                    b.Navigation("Rents");
                });

            modelBuilder.Entity("MRent.Domain.Entities.PlanEntity", b =>
                {
                    b.Navigation("Rents");
                });
#pragma warning restore 612, 618
        }
    }
}
