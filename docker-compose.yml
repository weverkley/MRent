services:
  api:
    container_name:  webapi
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - rabbitmq
      - minio
    build:
      context: .
      dockerfile: ./MRent.WebApi/Dockerfile
    environment:
      - ConnectionStrings__DefaultConnection=Server=postgres;Port=5432;Database=MRent;Username=postgres;Password=12345678;
      - MassTransit__RabbitMQ__Host=amqp://guest:guest@rabbitmq:5672
      - MassTransit__RabbitMQ__Username=guest
      - MassTransit__RabbitMQ__Password=guest
      - Minio__BucketName=m-rent
      - Minio__Endpoint=minio
      - Minio__AccessKey=minio
      - Minio__SecretKey=12345678
      - Minio__UseSSL=false
      - ASPNETCORE_URLS=http://+:5000
    networks:
      - backend_network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    restart: unless-stopped
    networks:
      - backend_network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 15s
      timeout: 30s
      retries: 3

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: 12345678
    volumes:
      - minio_data:/data
    restart: unless-stopped
    networks:
      - backend_network
    command: server /data --console-address ":9001"

  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345678
      POSTGRES_DB: MRent
      PGDATA: /data/postgres
    volumes:
       - pg_data:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - backend_network
    restart: unless-stopped
    
networks:
  backend_network:
    driver: bridge

volumes:
  minio_data:
  pg_data:  